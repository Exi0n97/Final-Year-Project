{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "current",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decrement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "20": "contracts/openzeppelin/contracts/mocks/CountersImpl.sol",
    "82": "contracts/openzeppelin/contracts/mocks/UUPS/TestInProd.sol",
    "85": "contracts/openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol",
    "93": "contracts/openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol"
  },
  "ast": {
    "absolutePath": "contracts/openzeppelin/contracts/mocks/UUPS/TestInProd.sol",
    "exportedSymbols": {
      "Address": [
        17462
      ],
      "Counters": [
        17642
      ],
      "CountersImpl": [
        2738
      ],
      "ERC1967Upgrade": [
        8547
      ],
      "IBeacon": [
        8691
      ],
      "StorageSlot": [
        17868
      ],
      "UUPSUpgradeable": [
        9164
      ],
      "UUPSUpgradeableBrokenMock": [
        8065
      ],
      "UUPSUpgradeableMock": [
        8008
      ],
      "UUPSUpgradeableUnsafeMock": [
        8046
      ]
    },
    "id": 8066,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 7994,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:82"
      },
      {
        "absolutePath": "contracts/openzeppelin/contracts/mocks/CountersImpl.sol",
        "file": "../CountersImpl.sol",
        "id": 7995,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 8066,
        "sourceUnit": 2739,
        "src": "58:29:82",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol",
        "file": "../../proxy/utils/UUPSUpgradeable.sol",
        "id": 7996,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 8066,
        "sourceUnit": 9165,
        "src": "88:47:82",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 7997,
              "name": "CountersImpl",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2738,
              "src": "169:12:82"
            },
            "id": 7998,
            "nodeType": "InheritanceSpecifier",
            "src": "169:12:82"
          },
          {
            "baseName": {
              "id": 7999,
              "name": "UUPSUpgradeable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 9164,
              "src": "183:15:82"
            },
            "id": 8000,
            "nodeType": "InheritanceSpecifier",
            "src": "183:15:82"
          }
        ],
        "canonicalName": "UUPSUpgradeableMock",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 8008,
        "linearizedBaseContracts": [
          8008,
          9164,
          8547,
          2738
        ],
        "name": "UUPSUpgradeableMock",
        "nameLocation": "146:19:82",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "baseFunctions": [
              9163
            ],
            "body": {
              "id": 8006,
              "nodeType": "Block",
              "src": "357:2:82",
              "statements": []
            },
            "id": 8007,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_authorizeUpgrade",
            "nameLocation": "304:17:82",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 8004,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "348:8:82"
            },
            "parameters": {
              "id": 8003,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8002,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 8007,
                  "src": "322:7:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 8001,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "322:7:82",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "321:9:82"
            },
            "returnParameters": {
              "id": 8005,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "357:0:82"
            },
            "scope": 8008,
            "src": "295:64:82",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 8066,
        "src": "137:224:82",
        "usedErrors": []
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 8009,
              "name": "UUPSUpgradeableMock",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 8008,
              "src": "401:19:82"
            },
            "id": 8010,
            "nodeType": "InheritanceSpecifier",
            "src": "401:19:82"
          }
        ],
        "canonicalName": "UUPSUpgradeableUnsafeMock",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 8046,
        "linearizedBaseContracts": [
          8046,
          8008,
          9164,
          8547,
          2738
        ],
        "name": "UUPSUpgradeableUnsafeMock",
        "nameLocation": "372:25:82",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "baseFunctions": [
              9138
            ],
            "body": {
              "id": 8027,
              "nodeType": "Block",
              "src": "499:86:82",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 8019,
                        "name": "newImplementation",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8012,
                        "src": "542:17:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "",
                            "id": 8022,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "567:2:82",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            },
                            "value": ""
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            }
                          ],
                          "id": 8021,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "561:5:82",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                            "typeString": "type(bytes storage pointer)"
                          },
                          "typeName": {
                            "id": 8020,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "561:5:82",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 8023,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "561:9:82",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "hexValue": "66616c7365",
                        "id": 8024,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "572:5:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "expression": {
                        "id": 8016,
                        "name": "ERC1967Upgrade",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8547,
                        "src": "509:14:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ERC1967Upgrade_$8547_$",
                          "typeString": "type(contract ERC1967Upgrade)"
                        }
                      },
                      "id": 8018,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_upgradeToAndCall",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 8298,
                      "src": "509:32:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$",
                        "typeString": "function (address,bytes memory,bool)"
                      }
                    },
                    "id": 8025,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "509:69:82",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8026,
                  "nodeType": "ExpressionStatement",
                  "src": "509:69:82"
                }
              ]
            },
            "functionSelector": "3659cfe6",
            "id": 8028,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "upgradeTo",
            "nameLocation": "436:9:82",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 8014,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "490:8:82"
            },
            "parameters": {
              "id": 8013,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8012,
                  "mutability": "mutable",
                  "name": "newImplementation",
                  "nameLocation": "454:17:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 8028,
                  "src": "446:25:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 8011,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "446:7:82",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "445:27:82"
            },
            "returnParameters": {
              "id": 8015,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "499:0:82"
            },
            "scope": 8046,
            "src": "427:158:82",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              9157
            ],
            "body": {
              "id": 8044,
              "nodeType": "Block",
              "src": "697:81:82",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 8039,
                        "name": "newImplementation",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8030,
                        "src": "740:17:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 8040,
                        "name": "data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8032,
                        "src": "759:4:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "hexValue": "66616c7365",
                        "id": 8041,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "765:5:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "expression": {
                        "id": 8036,
                        "name": "ERC1967Upgrade",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8547,
                        "src": "707:14:82",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ERC1967Upgrade_$8547_$",
                          "typeString": "type(contract ERC1967Upgrade)"
                        }
                      },
                      "id": 8038,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_upgradeToAndCall",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 8298,
                      "src": "707:32:82",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$",
                        "typeString": "function (address,bytes memory,bool)"
                      }
                    },
                    "id": 8042,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "707:64:82",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8043,
                  "nodeType": "ExpressionStatement",
                  "src": "707:64:82"
                }
              ]
            },
            "functionSelector": "4f1ef286",
            "id": 8045,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "upgradeToAndCall",
            "nameLocation": "600:16:82",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 8034,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "688:8:82"
            },
            "parameters": {
              "id": 8033,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8030,
                  "mutability": "mutable",
                  "name": "newImplementation",
                  "nameLocation": "625:17:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 8045,
                  "src": "617:25:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 8029,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "617:7:82",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 8032,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "657:4:82",
                  "nodeType": "VariableDeclaration",
                  "scope": 8045,
                  "src": "644:17:82",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 8031,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "644:5:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "616:46:82"
            },
            "returnParameters": {
              "id": 8035,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "697:0:82"
            },
            "scope": 8046,
            "src": "591:187:82",
            "stateMutability": "payable",
            "virtual": true,
            "visibility": "external"
          }
        ],
        "scope": 8066,
        "src": "363:417:82",
        "usedErrors": []
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 8047,
              "name": "UUPSUpgradeableMock",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 8008,
              "src": "820:19:82"
            },
            "id": 8048,
            "nodeType": "InheritanceSpecifier",
            "src": "820:19:82"
          }
        ],
        "canonicalName": "UUPSUpgradeableBrokenMock",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 8065,
        "linearizedBaseContracts": [
          8065,
          8008,
          9164,
          8547,
          2738
        ],
        "name": "UUPSUpgradeableBrokenMock",
        "nameLocation": "791:25:82",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "baseFunctions": [
              9138
            ],
            "body": {
              "id": 8054,
              "nodeType": "Block",
              "src": "900:23:82",
              "statements": []
            },
            "functionSelector": "3659cfe6",
            "id": 8055,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "upgradeTo",
            "nameLocation": "855:9:82",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 8052,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "891:8:82"
            },
            "parameters": {
              "id": 8051,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8050,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 8055,
                  "src": "865:7:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 8049,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "865:7:82",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "864:9:82"
            },
            "returnParameters": {
              "id": 8053,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "900:0:82"
            },
            "scope": 8065,
            "src": "846:77:82",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              9157
            ],
            "body": {
              "id": 8063,
              "nodeType": "Block",
              "src": "1012:23:82",
              "statements": []
            },
            "functionSelector": "4f1ef286",
            "id": 8064,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "upgradeToAndCall",
            "nameLocation": "938:16:82",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 8061,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1003:8:82"
            },
            "parameters": {
              "id": 8060,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 8057,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 8064,
                  "src": "955:7:82",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 8056,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "955:7:82",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 8059,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 8064,
                  "src": "964:12:82",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 8058,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "964:5:82",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "954:23:82"
            },
            "returnParameters": {
              "id": 8062,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1012:0:82"
            },
            "scope": 8065,
            "src": "929:106:82",
            "stateMutability": "payable",
            "virtual": true,
            "visibility": "external"
          }
        ],
        "scope": 8066,
        "src": "782:255:82",
        "usedErrors": []
      }
    ],
    "src": "33:1005:82"
  },
  "bytecode": "608060405234801561001057600080fd5b506102b7806100206000396000f3fe6080604052600436106100555760003560e01c80632baeceb71461005a5780633659cfe6146100715780634f1ef2861461008f5780639fa6a6e3146100a1578063d09de08a146100c3578063d826f88f146100d8575b600080fd5b34801561006657600080fd5b5061006f6100ed565b005b34801561007d57600080fd5b5061006f61008c366004610187565b50565b61006f61009d3660046101bf565b5050565b3480156100ad57600080fd5b5060005460405190815260200160405180910390f35b3480156100cf57600080fd5b5061006f6100f9565b3480156100e457600080fd5b5061006f610107565b6100f76000610110565b565b6100f7600080546001019055565b6100f760008055565b8054806101635760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f770000000000604482015260640160405180910390fd5b600019019055565b80356001600160a01b038116811461018257600080fd5b919050565b60006020828403121561019957600080fd5b6101a28261016b565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156101d257600080fd5b6101db8361016b565b9150602083013567ffffffffffffffff808211156101f857600080fd5b818501915085601f83011261020c57600080fd5b81358181111561021e5761021e6101a9565b604051601f8201601f19908116603f01168101908382118183101715610246576102466101a9565b8160405282815288602084870101111561025f57600080fd5b826020860160208301376000602084830101528095505050505050925092905056fea2646970667358221220726f68d0eec0c8052b6609aef6d3086f21bfd43bf55e50b2dd445c0e417f005a64736f6c634300080c0033",
  "bytecodeSha1": "b734ee91db54996473ffc6488b76527b6b1da720",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.12+commit.f00d7308"
  },
  "contractName": "UUPSUpgradeableBrokenMock",
  "coverageMap": {
    "branches": {
      "20": {},
      "82": {},
      "85": {},
      "93": {}
    },
    "statements": {
      "20": {
        "CountersImpl.decrement": {
          "0": [
            407,
            427
          ]
        },
        "CountersImpl.increment": {
          "1": [
            336,
            356
          ]
        },
        "CountersImpl.reset": {
          "2": [
            474,
            490
          ]
        }
      },
      "82": {},
      "85": {},
      "93": {}
    }
  },
  "dependencies": [
    "CountersImpl",
    "ERC1967Upgrade",
    "UUPSUpgradeable",
    "UUPSUpgradeableMock"
  ],
  "deployedBytecode": "6080604052600436106100555760003560e01c80632baeceb71461005a5780633659cfe6146100715780634f1ef2861461008f5780639fa6a6e3146100a1578063d09de08a146100c3578063d826f88f146100d8575b600080fd5b34801561006657600080fd5b5061006f6100ed565b005b34801561007d57600080fd5b5061006f61008c366004610187565b50565b61006f61009d3660046101bf565b5050565b3480156100ad57600080fd5b5060005460405190815260200160405180910390f35b3480156100cf57600080fd5b5061006f6100f9565b3480156100e457600080fd5b5061006f610107565b6100f76000610110565b565b6100f7600080546001019055565b6100f760008055565b8054806101635760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f770000000000604482015260640160405180910390fd5b600019019055565b80356001600160a01b038116811461018257600080fd5b919050565b60006020828403121561019957600080fd5b6101a28261016b565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156101d257600080fd5b6101db8361016b565b9150602083013567ffffffffffffffff808211156101f857600080fd5b818501915085601f83011261020c57600080fd5b81358181111561021e5761021e6101a9565b604051601f8201601f19908116603f01168101908382118183101715610246576102466101a9565b8160405282815288602084870101111561025f57600080fd5b826020860160208301376000602084830101528095505050505050925092905056fea2646970667358221220726f68d0eec0c8052b6609aef6d3086f21bfd43bf55e50b2dd445c0e417f005a64736f6c634300080c0033",
  "deployedSourceMap": "782:255:82:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;369:65:20;;;;;;;;;;;;;:::i;:::-;;846:77:82;;;;;;;;;;-1:-1:-1;846:77:82;;;;;:::i;:::-;;;929:106;;;;;;:::i;:::-;;;;201:91:20;;;;;;;;;;-1:-1:-1;241:7:20;864:14:143;201:91:20;;1661:25:169;;;1649:2;1634:18;201:91:20;;;;;;;298:65;;;;;;;;;;;;;:::i;440:57::-;;;;;;;;;;;;;:::i;369:65::-;407:20;:8;:18;:20::i;:::-;369:65::o;298:::-;336:20;:8;978:19:143;;996:1;978:19;;;891:123;440:57:20;474:16;:8;1331:1:143;1314:18;1255:84;1020:229;1099:14;;1131:9;1123:49;;;;-1:-1:-1;;;1123:49:143;;1899:2:169;1123:49:143;;;1881:21:169;1938:2;1918:18;;;1911:30;1977:29;1957:18;;;1950:57;2024:18;;1123:49:143;;;;;;;;-1:-1:-1;;1223:9:143;1206:26;;1020:229::o;14:173:169:-;82:20;;-1:-1:-1;;;;;131:31:169;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:186::-;251:6;304:2;292:9;283:7;279:23;275:32;272:52;;;320:1;317;310:12;272:52;343:29;362:9;343:29;:::i;:::-;333:39;192:186;-1:-1:-1;;;192:186:169:o;383:127::-;444:10;439:3;435:20;432:1;425:31;475:4;472:1;465:15;499:4;496:1;489:15;515:995;592:6;600;653:2;641:9;632:7;628:23;624:32;621:52;;;669:1;666;659:12;621:52;692:29;711:9;692:29;:::i;:::-;682:39;;772:2;761:9;757:18;744:32;795:18;836:2;828:6;825:14;822:34;;;852:1;849;842:12;822:34;890:6;879:9;875:22;865:32;;935:7;928:4;924:2;920:13;916:27;906:55;;957:1;954;947:12;906:55;993:2;980:16;1015:2;1011;1008:10;1005:36;;;1021:18;;:::i;:::-;1096:2;1090:9;1064:2;1150:13;;-1:-1:-1;;1146:22:169;;;1170:2;1142:31;1138:40;1126:53;;;1194:18;;;1214:22;;;1191:46;1188:72;;;1240:18;;:::i;:::-;1280:10;1276:2;1269:22;1315:2;1307:6;1300:18;1355:7;1350:2;1345;1341;1337:11;1333:20;1330:33;1327:53;;;1376:1;1373;1366:12;1327:53;1432:2;1427;1423;1419:11;1414:2;1406:6;1402:15;1389:46;1477:1;1472:2;1467;1459:6;1455:15;1451:24;1444:35;1498:6;1488:16;;;;;;;515:995;;;;;:::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    782,
    1037
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2BAECEB7 EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x71 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x8F JUMPI DUP1 PUSH4 0x9FA6A6E3 EQ PUSH2 0xA1 JUMPI DUP1 PUSH4 0xD09DE08A EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0xD826F88F EQ PUSH2 0xD8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F PUSH2 0xED JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F PUSH2 0x8C CALLDATASIZE PUSH1 0x4 PUSH2 0x187 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x6F PUSH2 0x9D CALLDATASIZE PUSH1 0x4 PUSH2 0x1BF JUMP JUMPDEST POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F PUSH2 0xF9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F PUSH2 0x107 JUMP JUMPDEST PUSH2 0xF7 PUSH1 0x0 PUSH2 0x110 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF7 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xF7 PUSH1 0x0 DUP1 SSTORE JUMP JUMPDEST DUP1 SLOAD DUP1 PUSH2 0x163 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F756E7465723A2064656372656D656E74206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 NOT ADD SWAP1 SSTORE JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x182 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x199 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A2 DUP3 PUSH2 0x16B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1DB DUP4 PUSH2 0x16B JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x20C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x21E JUMPI PUSH2 0x21E PUSH2 0x1A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x246 JUMPI PUSH2 0x246 PUSH2 0x1A9 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x25F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH19 0x6F68D0EEC0C8052B6609AEF6D3086F21BFD43B CREATE2 0x5E POP 0xB2 0xDD DIFFICULTY 0x5C 0xE COINBASE PUSH32 0x5A64736F6C634300080C003300000000000000000000000000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        782,
        1037
      ],
      "op": "PUSH1",
      "path": "82",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH1",
      "path": "82",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "MSTORE",
      "path": "82"
    },
    "5": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH1",
      "path": "82",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "CALLDATASIZE",
      "path": "82"
    },
    "8": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "LT",
      "path": "82"
    },
    "9": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH2",
      "path": "82",
      "value": "0x55"
    },
    "12": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "JUMPI",
      "path": "82"
    },
    "13": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH1",
      "path": "82",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "CALLDATALOAD",
      "path": "82"
    },
    "16": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH1",
      "path": "82",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "SHR",
      "path": "82"
    },
    "19": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "DUP1",
      "path": "82"
    },
    "20": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH4",
      "path": "82",
      "value": "0x2BAECEB7"
    },
    "25": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "EQ",
      "path": "82"
    },
    "26": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH2",
      "path": "82",
      "value": "0x5A"
    },
    "29": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "JUMPI",
      "path": "82"
    },
    "30": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "DUP1",
      "path": "82"
    },
    "31": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH4",
      "path": "82",
      "value": "0x3659CFE6"
    },
    "36": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "EQ",
      "path": "82"
    },
    "37": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH2",
      "path": "82",
      "value": "0x71"
    },
    "40": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "JUMPI",
      "path": "82"
    },
    "41": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "DUP1",
      "path": "82"
    },
    "42": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH4",
      "path": "82",
      "value": "0x4F1EF286"
    },
    "47": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "EQ",
      "path": "82"
    },
    "48": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH2",
      "path": "82",
      "value": "0x8F"
    },
    "51": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "JUMPI",
      "path": "82"
    },
    "52": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "DUP1",
      "path": "82"
    },
    "53": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH4",
      "path": "82",
      "value": "0x9FA6A6E3"
    },
    "58": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "EQ",
      "path": "82"
    },
    "59": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH2",
      "path": "82",
      "value": "0xA1"
    },
    "62": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "JUMPI",
      "path": "82"
    },
    "63": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "DUP1",
      "path": "82"
    },
    "64": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH4",
      "path": "82",
      "value": "0xD09DE08A"
    },
    "69": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "EQ",
      "path": "82"
    },
    "70": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH2",
      "path": "82",
      "value": "0xC3"
    },
    "73": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "JUMPI",
      "path": "82"
    },
    "74": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "DUP1",
      "path": "82"
    },
    "75": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH4",
      "path": "82",
      "value": "0xD826F88F"
    },
    "80": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "EQ",
      "path": "82"
    },
    "81": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH2",
      "path": "82",
      "value": "0xD8"
    },
    "84": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "JUMPI",
      "path": "82"
    },
    "85": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "JUMPDEST",
      "path": "82"
    },
    "86": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH1",
      "path": "82",
      "value": "0x0"
    },
    "88": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "DUP1",
      "path": "82"
    },
    "89": {
      "first_revert": true,
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "REVERT",
      "path": "82"
    },
    "90": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "91": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "CALLVALUE",
      "path": "20"
    },
    "92": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "DUP1",
      "path": "20"
    },
    "93": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "94": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x66"
    },
    "97": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "98": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "100": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "DUP1",
      "path": "20"
    },
    "101": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "REVERT",
      "path": "20"
    },
    "102": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "103": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "POP",
      "path": "20"
    },
    "104": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x6F"
    },
    "107": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xED"
    },
    "110": {
      "fn": "CountersImpl.decrement",
      "jump": "i",
      "offset": [
        369,
        434
      ],
      "op": "JUMP",
      "path": "20"
    },
    "111": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "112": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "STOP",
      "path": "20"
    },
    "113": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "JUMPDEST",
      "path": "82"
    },
    "114": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "CALLVALUE",
      "path": "82"
    },
    "115": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "DUP1",
      "path": "82"
    },
    "116": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "ISZERO",
      "path": "82"
    },
    "117": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "PUSH2",
      "path": "82",
      "value": "0x7D"
    },
    "120": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "JUMPI",
      "path": "82"
    },
    "121": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "PUSH1",
      "path": "82",
      "value": "0x0"
    },
    "123": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "DUP1",
      "path": "82"
    },
    "124": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "REVERT",
      "path": "82"
    },
    "125": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "JUMPDEST",
      "path": "82"
    },
    "126": {
      "op": "POP"
    },
    "127": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "PUSH2",
      "path": "82",
      "value": "0x6F"
    },
    "130": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "PUSH2",
      "path": "82",
      "value": "0x8C"
    },
    "133": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "CALLDATASIZE",
      "path": "82"
    },
    "134": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "PUSH1",
      "path": "82",
      "value": "0x4"
    },
    "136": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "PUSH2",
      "path": "82",
      "value": "0x187"
    },
    "139": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "jump": "i",
      "offset": [
        846,
        923
      ],
      "op": "JUMP",
      "path": "82"
    },
    "140": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "JUMPDEST",
      "path": "82"
    },
    "141": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "POP",
      "path": "82"
    },
    "142": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "JUMP",
      "path": "82"
    },
    "143": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeToAndCall",
      "offset": [
        929,
        1035
      ],
      "op": "JUMPDEST",
      "path": "82"
    },
    "144": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeToAndCall",
      "offset": [
        929,
        1035
      ],
      "op": "PUSH2",
      "path": "82",
      "value": "0x6F"
    },
    "147": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeToAndCall",
      "offset": [
        929,
        1035
      ],
      "op": "PUSH2",
      "path": "82",
      "value": "0x9D"
    },
    "150": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeToAndCall",
      "offset": [
        929,
        1035
      ],
      "op": "CALLDATASIZE",
      "path": "82"
    },
    "151": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeToAndCall",
      "offset": [
        929,
        1035
      ],
      "op": "PUSH1",
      "path": "82",
      "value": "0x4"
    },
    "153": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeToAndCall",
      "offset": [
        929,
        1035
      ],
      "op": "PUSH2",
      "path": "82",
      "value": "0x1BF"
    },
    "156": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeToAndCall",
      "jump": "i",
      "offset": [
        929,
        1035
      ],
      "op": "JUMP",
      "path": "82"
    },
    "157": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeToAndCall",
      "offset": [
        929,
        1035
      ],
      "op": "JUMPDEST",
      "path": "82"
    },
    "158": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeToAndCall",
      "offset": [
        929,
        1035
      ],
      "op": "POP",
      "path": "82"
    },
    "159": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeToAndCall",
      "offset": [
        929,
        1035
      ],
      "op": "POP",
      "path": "82"
    },
    "160": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeToAndCall",
      "offset": [
        929,
        1035
      ],
      "op": "JUMP",
      "path": "82"
    },
    "161": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "162": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "CALLVALUE",
      "path": "20"
    },
    "163": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "DUP1",
      "path": "20"
    },
    "164": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "165": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xAD"
    },
    "168": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "169": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "171": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "DUP1",
      "path": "20"
    },
    "172": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "REVERT",
      "path": "20"
    },
    "173": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "174": {
      "op": "POP"
    },
    "175": {
      "fn": "CountersImpl.current",
      "offset": [
        241,
        248
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "177": {
      "op": "SLOAD"
    },
    "178": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "180": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "181": {
      "op": "SWAP1"
    },
    "182": {
      "op": "DUP2"
    },
    "183": {
      "op": "MSTORE"
    },
    "184": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "186": {
      "op": "ADD"
    },
    "187": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "189": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "190": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "DUP1",
      "path": "20"
    },
    "191": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "192": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "SUB",
      "path": "20"
    },
    "193": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "194": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "RETURN",
      "path": "20"
    },
    "195": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "196": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "CALLVALUE",
      "path": "20"
    },
    "197": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "DUP1",
      "path": "20"
    },
    "198": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "199": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xCF"
    },
    "202": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "203": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "205": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "DUP1",
      "path": "20"
    },
    "206": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "REVERT",
      "path": "20"
    },
    "207": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "208": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "POP",
      "path": "20"
    },
    "209": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x6F"
    },
    "212": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xF9"
    },
    "215": {
      "fn": "CountersImpl.increment",
      "jump": "i",
      "offset": [
        298,
        363
      ],
      "op": "JUMP",
      "path": "20"
    },
    "216": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "217": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "CALLVALUE",
      "path": "20"
    },
    "218": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "DUP1",
      "path": "20"
    },
    "219": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "220": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xE4"
    },
    "223": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "224": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "226": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "DUP1",
      "path": "20"
    },
    "227": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "REVERT",
      "path": "20"
    },
    "228": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "229": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "POP",
      "path": "20"
    },
    "230": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x6F"
    },
    "233": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x107"
    },
    "236": {
      "fn": "CountersImpl.reset",
      "jump": "i",
      "offset": [
        440,
        497
      ],
      "op": "JUMP",
      "path": "20"
    },
    "237": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "238": {
      "fn": "CountersImpl.decrement",
      "offset": [
        407,
        427
      ],
      "op": "PUSH2",
      "path": "20",
      "statement": 0,
      "value": "0xF7"
    },
    "241": {
      "fn": "CountersImpl.decrement",
      "offset": [
        407,
        415
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "243": {
      "fn": "CountersImpl.decrement",
      "offset": [
        407,
        425
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x110"
    },
    "246": {
      "fn": "CountersImpl.decrement",
      "jump": "i",
      "offset": [
        407,
        427
      ],
      "op": "JUMP",
      "path": "20"
    },
    "247": {
      "fn": "CountersImpl.decrement",
      "offset": [
        407,
        427
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "248": {
      "fn": "CountersImpl.decrement",
      "jump": "o",
      "offset": [
        369,
        434
      ],
      "op": "JUMP",
      "path": "20"
    },
    "249": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "250": {
      "fn": "CountersImpl.increment",
      "offset": [
        336,
        356
      ],
      "op": "PUSH2",
      "path": "20",
      "statement": 1,
      "value": "0xF7"
    },
    "253": {
      "fn": "CountersImpl.increment",
      "offset": [
        336,
        344
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "255": {
      "op": "DUP1"
    },
    "256": {
      "op": "SLOAD"
    },
    "257": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "259": {
      "op": "ADD"
    },
    "260": {
      "op": "SWAP1"
    },
    "261": {
      "op": "SSTORE"
    },
    "262": {
      "op": "JUMP"
    },
    "263": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "264": {
      "fn": "CountersImpl.reset",
      "offset": [
        474,
        490
      ],
      "op": "PUSH2",
      "path": "20",
      "statement": 2,
      "value": "0xF7"
    },
    "267": {
      "fn": "CountersImpl.reset",
      "offset": [
        474,
        482
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "269": {
      "op": "DUP1"
    },
    "270": {
      "op": "SSTORE"
    },
    "271": {
      "op": "JUMP"
    },
    "272": {
      "op": "JUMPDEST"
    },
    "273": {
      "op": "DUP1"
    },
    "274": {
      "op": "SLOAD"
    },
    "275": {
      "op": "DUP1"
    },
    "276": {
      "op": "PUSH2",
      "value": "0x163"
    },
    "279": {
      "op": "JUMPI"
    },
    "280": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "282": {
      "op": "MLOAD"
    },
    "283": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "287": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "289": {
      "op": "SHL"
    },
    "290": {
      "op": "DUP2"
    },
    "291": {
      "op": "MSTORE"
    },
    "292": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "294": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "296": {
      "op": "DUP3"
    },
    "297": {
      "op": "ADD"
    },
    "298": {
      "op": "MSTORE"
    },
    "299": {
      "op": "PUSH1",
      "value": "0x1B"
    },
    "301": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "303": {
      "op": "DUP3"
    },
    "304": {
      "op": "ADD"
    },
    "305": {
      "op": "MSTORE"
    },
    "306": {
      "op": "PUSH32",
      "value": "0x436F756E7465723A2064656372656D656E74206F766572666C6F770000000000"
    },
    "339": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "341": {
      "op": "DUP3"
    },
    "342": {
      "op": "ADD"
    },
    "343": {
      "op": "MSTORE"
    },
    "344": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "346": {
      "op": "ADD"
    },
    "347": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "349": {
      "op": "MLOAD"
    },
    "350": {
      "op": "DUP1"
    },
    "351": {
      "op": "SWAP2"
    },
    "352": {
      "op": "SUB"
    },
    "353": {
      "op": "SWAP1"
    },
    "354": {
      "op": "REVERT"
    },
    "355": {
      "op": "JUMPDEST"
    },
    "356": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "358": {
      "op": "NOT"
    },
    "359": {
      "op": "ADD"
    },
    "360": {
      "op": "SWAP1"
    },
    "361": {
      "op": "SSTORE"
    },
    "362": {
      "jump": "o",
      "op": "JUMP"
    },
    "363": {
      "op": "JUMPDEST"
    },
    "364": {
      "op": "DUP1"
    },
    "365": {
      "op": "CALLDATALOAD"
    },
    "366": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "368": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "370": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "372": {
      "op": "SHL"
    },
    "373": {
      "op": "SUB"
    },
    "374": {
      "op": "DUP2"
    },
    "375": {
      "op": "AND"
    },
    "376": {
      "op": "DUP2"
    },
    "377": {
      "op": "EQ"
    },
    "378": {
      "op": "PUSH2",
      "value": "0x182"
    },
    "381": {
      "op": "JUMPI"
    },
    "382": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "384": {
      "op": "DUP1"
    },
    "385": {
      "op": "REVERT"
    },
    "386": {
      "op": "JUMPDEST"
    },
    "387": {
      "op": "SWAP2"
    },
    "388": {
      "op": "SWAP1"
    },
    "389": {
      "op": "POP"
    },
    "390": {
      "jump": "o",
      "op": "JUMP"
    },
    "391": {
      "op": "JUMPDEST"
    },
    "392": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "394": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "396": {
      "op": "DUP3"
    },
    "397": {
      "op": "DUP5"
    },
    "398": {
      "op": "SUB"
    },
    "399": {
      "op": "SLT"
    },
    "400": {
      "op": "ISZERO"
    },
    "401": {
      "op": "PUSH2",
      "value": "0x199"
    },
    "404": {
      "op": "JUMPI"
    },
    "405": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "407": {
      "op": "DUP1"
    },
    "408": {
      "op": "REVERT"
    },
    "409": {
      "op": "JUMPDEST"
    },
    "410": {
      "op": "PUSH2",
      "value": "0x1A2"
    },
    "413": {
      "op": "DUP3"
    },
    "414": {
      "op": "PUSH2",
      "value": "0x16B"
    },
    "417": {
      "jump": "i",
      "op": "JUMP"
    },
    "418": {
      "op": "JUMPDEST"
    },
    "419": {
      "op": "SWAP4"
    },
    "420": {
      "op": "SWAP3"
    },
    "421": {
      "op": "POP"
    },
    "422": {
      "op": "POP"
    },
    "423": {
      "op": "POP"
    },
    "424": {
      "jump": "o",
      "op": "JUMP"
    },
    "425": {
      "op": "JUMPDEST"
    },
    "426": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "431": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "433": {
      "op": "SHL"
    },
    "434": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "436": {
      "op": "MSTORE"
    },
    "437": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "439": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "441": {
      "op": "MSTORE"
    },
    "442": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "444": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "446": {
      "op": "REVERT"
    },
    "447": {
      "op": "JUMPDEST"
    },
    "448": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "450": {
      "op": "DUP1"
    },
    "451": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "453": {
      "op": "DUP4"
    },
    "454": {
      "op": "DUP6"
    },
    "455": {
      "op": "SUB"
    },
    "456": {
      "op": "SLT"
    },
    "457": {
      "op": "ISZERO"
    },
    "458": {
      "op": "PUSH2",
      "value": "0x1D2"
    },
    "461": {
      "op": "JUMPI"
    },
    "462": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "464": {
      "op": "DUP1"
    },
    "465": {
      "op": "REVERT"
    },
    "466": {
      "op": "JUMPDEST"
    },
    "467": {
      "op": "PUSH2",
      "value": "0x1DB"
    },
    "470": {
      "op": "DUP4"
    },
    "471": {
      "op": "PUSH2",
      "value": "0x16B"
    },
    "474": {
      "jump": "i",
      "op": "JUMP"
    },
    "475": {
      "op": "JUMPDEST"
    },
    "476": {
      "op": "SWAP2"
    },
    "477": {
      "op": "POP"
    },
    "478": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "480": {
      "op": "DUP4"
    },
    "481": {
      "op": "ADD"
    },
    "482": {
      "op": "CALLDATALOAD"
    },
    "483": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "492": {
      "op": "DUP1"
    },
    "493": {
      "op": "DUP3"
    },
    "494": {
      "op": "GT"
    },
    "495": {
      "op": "ISZERO"
    },
    "496": {
      "op": "PUSH2",
      "value": "0x1F8"
    },
    "499": {
      "op": "JUMPI"
    },
    "500": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "502": {
      "op": "DUP1"
    },
    "503": {
      "op": "REVERT"
    },
    "504": {
      "op": "JUMPDEST"
    },
    "505": {
      "op": "DUP2"
    },
    "506": {
      "op": "DUP6"
    },
    "507": {
      "op": "ADD"
    },
    "508": {
      "op": "SWAP2"
    },
    "509": {
      "op": "POP"
    },
    "510": {
      "op": "DUP6"
    },
    "511": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "513": {
      "op": "DUP4"
    },
    "514": {
      "op": "ADD"
    },
    "515": {
      "op": "SLT"
    },
    "516": {
      "op": "PUSH2",
      "value": "0x20C"
    },
    "519": {
      "op": "JUMPI"
    },
    "520": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "522": {
      "op": "DUP1"
    },
    "523": {
      "op": "REVERT"
    },
    "524": {
      "op": "JUMPDEST"
    },
    "525": {
      "op": "DUP2"
    },
    "526": {
      "op": "CALLDATALOAD"
    },
    "527": {
      "op": "DUP2"
    },
    "528": {
      "op": "DUP2"
    },
    "529": {
      "op": "GT"
    },
    "530": {
      "op": "ISZERO"
    },
    "531": {
      "op": "PUSH2",
      "value": "0x21E"
    },
    "534": {
      "op": "JUMPI"
    },
    "535": {
      "op": "PUSH2",
      "value": "0x21E"
    },
    "538": {
      "op": "PUSH2",
      "value": "0x1A9"
    },
    "541": {
      "jump": "i",
      "op": "JUMP"
    },
    "542": {
      "op": "JUMPDEST"
    },
    "543": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "545": {
      "op": "MLOAD"
    },
    "546": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "548": {
      "op": "DUP3"
    },
    "549": {
      "op": "ADD"
    },
    "550": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "552": {
      "op": "NOT"
    },
    "553": {
      "op": "SWAP1"
    },
    "554": {
      "op": "DUP2"
    },
    "555": {
      "op": "AND"
    },
    "556": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "558": {
      "op": "ADD"
    },
    "559": {
      "op": "AND"
    },
    "560": {
      "op": "DUP2"
    },
    "561": {
      "op": "ADD"
    },
    "562": {
      "op": "SWAP1"
    },
    "563": {
      "op": "DUP4"
    },
    "564": {
      "op": "DUP3"
    },
    "565": {
      "op": "GT"
    },
    "566": {
      "op": "DUP2"
    },
    "567": {
      "op": "DUP4"
    },
    "568": {
      "op": "LT"
    },
    "569": {
      "op": "OR"
    },
    "570": {
      "op": "ISZERO"
    },
    "571": {
      "op": "PUSH2",
      "value": "0x246"
    },
    "574": {
      "op": "JUMPI"
    },
    "575": {
      "op": "PUSH2",
      "value": "0x246"
    },
    "578": {
      "op": "PUSH2",
      "value": "0x1A9"
    },
    "581": {
      "jump": "i",
      "op": "JUMP"
    },
    "582": {
      "op": "JUMPDEST"
    },
    "583": {
      "op": "DUP2"
    },
    "584": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "586": {
      "op": "MSTORE"
    },
    "587": {
      "op": "DUP3"
    },
    "588": {
      "op": "DUP2"
    },
    "589": {
      "op": "MSTORE"
    },
    "590": {
      "op": "DUP9"
    },
    "591": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "593": {
      "op": "DUP5"
    },
    "594": {
      "op": "DUP8"
    },
    "595": {
      "op": "ADD"
    },
    "596": {
      "op": "ADD"
    },
    "597": {
      "op": "GT"
    },
    "598": {
      "op": "ISZERO"
    },
    "599": {
      "op": "PUSH2",
      "value": "0x25F"
    },
    "602": {
      "op": "JUMPI"
    },
    "603": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "605": {
      "op": "DUP1"
    },
    "606": {
      "op": "REVERT"
    },
    "607": {
      "op": "JUMPDEST"
    },
    "608": {
      "op": "DUP3"
    },
    "609": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "611": {
      "op": "DUP7"
    },
    "612": {
      "op": "ADD"
    },
    "613": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "615": {
      "op": "DUP4"
    },
    "616": {
      "op": "ADD"
    },
    "617": {
      "op": "CALLDATACOPY"
    },
    "618": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "620": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "622": {
      "op": "DUP5"
    },
    "623": {
      "op": "DUP4"
    },
    "624": {
      "op": "ADD"
    },
    "625": {
      "op": "ADD"
    },
    "626": {
      "op": "MSTORE"
    },
    "627": {
      "op": "DUP1"
    },
    "628": {
      "op": "SWAP6"
    },
    "629": {
      "op": "POP"
    },
    "630": {
      "op": "POP"
    },
    "631": {
      "op": "POP"
    },
    "632": {
      "op": "POP"
    },
    "633": {
      "op": "POP"
    },
    "634": {
      "op": "POP"
    },
    "635": {
      "op": "SWAP3"
    },
    "636": {
      "op": "POP"
    },
    "637": {
      "op": "SWAP3"
    },
    "638": {
      "op": "SWAP1"
    },
    "639": {
      "op": "POP"
    },
    "640": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "c8a10b888a9c5a23274c596fd65f2208cf3de150",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../CountersImpl.sol\";\nimport \"../../proxy/utils/UUPSUpgradeable.sol\";\n\ncontract UUPSUpgradeableMock is CountersImpl, UUPSUpgradeable {\n    // Not having any checks in this function is dangerous! Do not do this outside tests!\n    function _authorizeUpgrade(address) internal virtual override {}\n}\n\ncontract UUPSUpgradeableUnsafeMock is UUPSUpgradeableMock {\n    function upgradeTo(address newImplementation) external virtual override {\n        ERC1967Upgrade._upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual override {\n        ERC1967Upgrade._upgradeToAndCall(newImplementation, data, false);\n    }\n}\n\ncontract UUPSUpgradeableBrokenMock is UUPSUpgradeableMock {\n    function upgradeTo(address) external virtual override {\n        // pass\n    }\n\n    function upgradeToAndCall(address, bytes memory) external payable virtual override {\n        // pass\n    }\n}\n",
  "sourceMap": "782:255:82:-:0;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/openzeppelin/contracts/mocks/UUPS/TestInProd.sol",
  "type": "contract"
}