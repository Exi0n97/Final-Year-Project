pragma solidity ^0.8.0;

import "./openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./openzeppelin/contracts/token/ERC20/ERC20.sol";
import "./eth.sol";
import "./usd.sol";
import "./dex1.sol";
import "./dex2.sol";

contract exploiter{
Dex1 exchange1;
Dex2 exchange2;
etherToken eth;
usdToken usd;

constructor(address payable ethtoken,address payable usdtoken,address payable dex1, address payable dex2) public { 
    exchange1= Dex1(dex1);
    exchange2= Dex2(dex2);
    eth=etherToken(ethtoken);
    usd=usdToken(usdtoken);
    usd.mint(address(this),5000);
}

function buyethfromdex1(uint256 amount) public {
    usd.transferFrom(address(this),address(exchange1),amount);
}

function sellethtodex1(uint256 amount) public {
    eth.transferFrom(address(this),address(exchange1),amount);
}

function buyethfromdex2(uint256 amount) public {
        usd.transferFrom(address(this),address(exchange2),amount);
    }

function sellethtodex2(uint256 amount) public {
        eth.transferFrom(address(this),address(exchange2),amount);
    }

receive() external payable {}
}