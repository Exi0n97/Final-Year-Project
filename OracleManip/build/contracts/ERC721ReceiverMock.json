{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "retval",
          "type": "bytes4"
        },
        {
          "internalType": "enum ERC721ReceiverMock.Error",
          "name": "error",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gas",
          "type": "uint256"
        }
      ],
      "name": "Received",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "130": "contracts/openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
    "59": "contracts/openzeppelin/contracts/mocks/ERC721ReceiverMock.sol"
  },
  "ast": {
    "absolutePath": "contracts/openzeppelin/contracts/mocks/ERC721ReceiverMock.sol",
    "exportedSymbols": {
      "ERC721ReceiverMock": [
        5601
      ],
      "IERC721Receiver": [
        15636
      ]
    },
    "id": 5602,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5493,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:59"
      },
      {
        "absolutePath": "contracts/openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
        "file": "../token/ERC721/IERC721Receiver.sol",
        "id": 5494,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5602,
        "sourceUnit": 15637,
        "src": "58:45:59",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 5495,
              "name": "IERC721Receiver",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 15636,
              "src": "136:15:59"
            },
            "id": 5496,
            "nodeType": "InheritanceSpecifier",
            "src": "136:15:59"
          }
        ],
        "canonicalName": "ERC721ReceiverMock",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 5601,
        "linearizedBaseContracts": [
          5601,
          15636
        ],
        "name": "ERC721ReceiverMock",
        "nameLocation": "114:18:59",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "ERC721ReceiverMock.Error",
            "id": 5501,
            "members": [
              {
                "id": 5497,
                "name": "None",
                "nameLocation": "179:4:59",
                "nodeType": "EnumValue",
                "src": "179:4:59"
              },
              {
                "id": 5498,
                "name": "RevertWithMessage",
                "nameLocation": "193:17:59",
                "nodeType": "EnumValue",
                "src": "193:17:59"
              },
              {
                "id": 5499,
                "name": "RevertWithoutMessage",
                "nameLocation": "220:20:59",
                "nodeType": "EnumValue",
                "src": "220:20:59"
              },
              {
                "id": 5500,
                "name": "Panic",
                "nameLocation": "250:5:59",
                "nodeType": "EnumValue",
                "src": "250:5:59"
              }
            ],
            "name": "Error",
            "nameLocation": "163:5:59",
            "nodeType": "EnumDefinition",
            "src": "158:103:59"
          },
          {
            "constant": false,
            "id": 5503,
            "mutability": "immutable",
            "name": "_retval",
            "nameLocation": "292:7:59",
            "nodeType": "VariableDeclaration",
            "scope": 5601,
            "src": "267:32:59",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes4",
              "typeString": "bytes4"
            },
            "typeName": {
              "id": 5502,
              "name": "bytes4",
              "nodeType": "ElementaryTypeName",
              "src": "267:6:59",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 5506,
            "mutability": "immutable",
            "name": "_error",
            "nameLocation": "329:6:59",
            "nodeType": "VariableDeclaration",
            "scope": 5601,
            "src": "305:30:59",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_enum$_Error_$5501",
              "typeString": "enum ERC721ReceiverMock.Error"
            },
            "typeName": {
              "id": 5505,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 5504,
                "name": "Error",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 5501,
                "src": "305:5:59"
              },
              "referencedDeclaration": 5501,
              "src": "305:5:59",
              "typeDescriptions": {
                "typeIdentifier": "t_enum$_Error_$5501",
                "typeString": "enum ERC721ReceiverMock.Error"
              }
            },
            "visibility": "private"
          },
          {
            "anonymous": false,
            "id": 5518,
            "name": "Received",
            "nameLocation": "348:8:59",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 5517,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5508,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "365:8:59",
                  "nodeType": "VariableDeclaration",
                  "scope": 5518,
                  "src": "357:16:59",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5507,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "357:7:59",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5510,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "383:4:59",
                  "nodeType": "VariableDeclaration",
                  "scope": 5518,
                  "src": "375:12:59",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5509,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "375:7:59",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5512,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "397:7:59",
                  "nodeType": "VariableDeclaration",
                  "scope": 5518,
                  "src": "389:15:59",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5511,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "389:7:59",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5514,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "412:4:59",
                  "nodeType": "VariableDeclaration",
                  "scope": 5518,
                  "src": "406:10:59",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 5513,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "406:5:59",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5516,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "gas",
                  "nameLocation": "426:3:59",
                  "nodeType": "VariableDeclaration",
                  "scope": 5518,
                  "src": "418:11:59",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5515,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "418:7:59",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "356:74:59"
            },
            "src": "342:89:59"
          },
          {
            "body": {
              "id": 5534,
              "nodeType": "Block",
              "src": "477:57:59",
              "statements": [
                {
                  "expression": {
                    "id": 5528,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 5526,
                      "name": "_retval",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5503,
                      "src": "487:7:59",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 5527,
                      "name": "retval",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5520,
                      "src": "497:6:59",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      }
                    },
                    "src": "487:16:59",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "id": 5529,
                  "nodeType": "ExpressionStatement",
                  "src": "487:16:59"
                },
                {
                  "expression": {
                    "id": 5532,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 5530,
                      "name": "_error",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5506,
                      "src": "513:6:59",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Error_$5501",
                        "typeString": "enum ERC721ReceiverMock.Error"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 5531,
                      "name": "error",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5523,
                      "src": "522:5:59",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Error_$5501",
                        "typeString": "enum ERC721ReceiverMock.Error"
                      }
                    },
                    "src": "513:14:59",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_Error_$5501",
                      "typeString": "enum ERC721ReceiverMock.Error"
                    }
                  },
                  "id": 5533,
                  "nodeType": "ExpressionStatement",
                  "src": "513:14:59"
                }
              ]
            },
            "id": 5535,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5524,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5520,
                  "mutability": "mutable",
                  "name": "retval",
                  "nameLocation": "456:6:59",
                  "nodeType": "VariableDeclaration",
                  "scope": 5535,
                  "src": "449:13:59",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 5519,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "449:6:59",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5523,
                  "mutability": "mutable",
                  "name": "error",
                  "nameLocation": "470:5:59",
                  "nodeType": "VariableDeclaration",
                  "scope": 5535,
                  "src": "464:11:59",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_Error_$5501",
                    "typeString": "enum ERC721ReceiverMock.Error"
                  },
                  "typeName": {
                    "id": 5522,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5521,
                      "name": "Error",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5501,
                      "src": "464:5:59"
                    },
                    "referencedDeclaration": 5501,
                    "src": "464:5:59",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_Error_$5501",
                      "typeString": "enum ERC721ReceiverMock.Error"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "448:28:59"
            },
            "returnParameters": {
              "id": 5525,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "477:0:59"
            },
            "scope": 5601,
            "src": "437:97:59",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              15635
            ],
            "body": {
              "id": 5599,
              "nodeType": "Block",
              "src": "705:397:59",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_enum$_Error_$5501",
                      "typeString": "enum ERC721ReceiverMock.Error"
                    },
                    "id": 5552,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 5549,
                      "name": "_error",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5506,
                      "src": "719:6:59",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Error_$5501",
                        "typeString": "enum ERC721ReceiverMock.Error"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 5550,
                        "name": "Error",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5501,
                        "src": "729:5:59",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_Error_$5501_$",
                          "typeString": "type(enum ERC721ReceiverMock.Error)"
                        }
                      },
                      "id": 5551,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "RevertWithMessage",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 5498,
                      "src": "729:23:59",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Error_$5501",
                        "typeString": "enum ERC721ReceiverMock.Error"
                      }
                    },
                    "src": "719:33:59",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_enum$_Error_$5501",
                        "typeString": "enum ERC721ReceiverMock.Error"
                      },
                      "id": 5561,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 5558,
                        "name": "_error",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5506,
                        "src": "828:6:59",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Error_$5501",
                          "typeString": "enum ERC721ReceiverMock.Error"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "expression": {
                          "id": 5559,
                          "name": "Error",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5501,
                          "src": "838:5:59",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_Error_$5501_$",
                            "typeString": "type(enum ERC721ReceiverMock.Error)"
                          }
                        },
                        "id": 5560,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "RevertWithoutMessage",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 5499,
                        "src": "838:26:59",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Error_$5501",
                          "typeString": "enum ERC721ReceiverMock.Error"
                        }
                      },
                      "src": "828:36:59",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseBody": {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_enum$_Error_$5501",
                          "typeString": "enum ERC721ReceiverMock.Error"
                        },
                        "id": 5569,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 5566,
                          "name": "_error",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5506,
                          "src": "909:6:59",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Error_$5501",
                            "typeString": "enum ERC721ReceiverMock.Error"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "id": 5567,
                            "name": "Error",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5501,
                            "src": "919:5:59",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_Error_$5501_$",
                              "typeString": "type(enum ERC721ReceiverMock.Error)"
                            }
                          },
                          "id": 5568,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "Panic",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 5500,
                          "src": "919:11:59",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Error_$5501",
                            "typeString": "enum ERC721ReceiverMock.Error"
                          }
                        },
                        "src": "909:21:59",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 5585,
                      "nodeType": "IfStatement",
                      "src": "905:102:59",
                      "trueBody": {
                        "id": 5584,
                        "nodeType": "Block",
                        "src": "932:75:59",
                        "statements": [
                          {
                            "assignments": [
                              5571
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 5571,
                                "mutability": "mutable",
                                "name": "a",
                                "nameLocation": "954:1:59",
                                "nodeType": "VariableDeclaration",
                                "scope": 5584,
                                "src": "946:9:59",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 5570,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "946:7:59",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "visibility": "internal"
                              }
                            ],
                            "id": 5581,
                            "initialValue": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 5580,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 5574,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "966:1:59",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 5573,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "958:7:59",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_uint256_$",
                                    "typeString": "type(uint256)"
                                  },
                                  "typeName": {
                                    "id": 5572,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "958:7:59",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 5575,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "958:10:59",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 5578,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "979:1:59",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 5577,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "971:7:59",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_uint256_$",
                                    "typeString": "type(uint256)"
                                  },
                                  "typeName": {
                                    "id": 5576,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "971:7:59",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 5579,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "971:10:59",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "958:23:59",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "946:35:59"
                          },
                          {
                            "expression": {
                              "id": 5582,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 5571,
                              "src": "995:1:59",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 5583,
                            "nodeType": "ExpressionStatement",
                            "src": "995:1:59"
                          }
                        ]
                      }
                    },
                    "id": 5586,
                    "nodeType": "IfStatement",
                    "src": "824:183:59",
                    "trueBody": {
                      "id": 5565,
                      "nodeType": "Block",
                      "src": "866:33:59",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 5562,
                              "name": "revert",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [
                                -19,
                                -19
                              ],
                              "referencedDeclaration": -19,
                              "src": "880:6:59",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                                "typeString": "function () pure"
                              }
                            },
                            "id": 5563,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "880:8:59",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$__$",
                              "typeString": "tuple()"
                            }
                          },
                          "id": 5564,
                          "nodeType": "ExpressionStatement",
                          "src": "880:8:59"
                        }
                      ]
                    }
                  },
                  "id": 5587,
                  "nodeType": "IfStatement",
                  "src": "715:292:59",
                  "trueBody": {
                    "id": 5557,
                    "nodeType": "Block",
                    "src": "754:64:59",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "hexValue": "45524337323152656365697665724d6f636b3a20726576657274696e67",
                              "id": 5554,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "775:31:59",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_0dbe0f4c3249a8de74f224ef53fef2e300747c9f34527e99ce6490bf6e04eb76",
                                "typeString": "literal_string \"ERC721ReceiverMock: reverting\""
                              },
                              "value": "ERC721ReceiverMock: reverting"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_0dbe0f4c3249a8de74f224ef53fef2e300747c9f34527e99ce6490bf6e04eb76",
                                "typeString": "literal_string \"ERC721ReceiverMock: reverting\""
                              }
                            ],
                            "id": 5553,
                            "name": "revert",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -19,
                              -19
                            ],
                            "referencedDeclaration": -19,
                            "src": "768:6:59",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (string memory) pure"
                            }
                          },
                          "id": 5555,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "768:39:59",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 5556,
                        "nodeType": "ExpressionStatement",
                        "src": "768:39:59"
                      }
                    ]
                  }
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 5589,
                        "name": "operator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5537,
                        "src": "1030:8:59",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 5590,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5539,
                        "src": "1040:4:59",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 5591,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5541,
                        "src": "1046:7:59",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 5592,
                        "name": "data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5543,
                        "src": "1055:4:59",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 5593,
                          "name": "gasleft",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -7,
                          "src": "1061:7:59",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_gasleft_view$__$returns$_t_uint256_$",
                            "typeString": "function () view returns (uint256)"
                          }
                        },
                        "id": 5594,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1061:9:59",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 5588,
                      "name": "Received",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5518,
                      "src": "1021:8:59",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256,bytes memory,uint256)"
                      }
                    },
                    "id": 5595,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1021:50:59",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 5596,
                  "nodeType": "EmitStatement",
                  "src": "1016:55:59"
                },
                {
                  "expression": {
                    "id": 5597,
                    "name": "_retval",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 5503,
                    "src": "1088:7:59",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "functionReturnParameters": 5548,
                  "id": 5598,
                  "nodeType": "Return",
                  "src": "1081:14:59"
                }
              ]
            },
            "functionSelector": "150b7a02",
            "id": 5600,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "onERC721Received",
            "nameLocation": "549:16:59",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 5545,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "679:8:59"
            },
            "parameters": {
              "id": 5544,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5537,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "583:8:59",
                  "nodeType": "VariableDeclaration",
                  "scope": 5600,
                  "src": "575:16:59",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5536,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "575:7:59",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5539,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "609:4:59",
                  "nodeType": "VariableDeclaration",
                  "scope": 5600,
                  "src": "601:12:59",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5538,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "601:7:59",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5541,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "631:7:59",
                  "nodeType": "VariableDeclaration",
                  "scope": 5600,
                  "src": "623:15:59",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5540,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "623:7:59",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5543,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "661:4:59",
                  "nodeType": "VariableDeclaration",
                  "scope": 5600,
                  "src": "648:17:59",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 5542,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "648:5:59",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "565:106:59"
            },
            "returnParameters": {
              "id": 5548,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5547,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5600,
                  "src": "697:6:59",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 5546,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "697:6:59",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "696:8:59"
            },
            "scope": 5601,
            "src": "540:562:59",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 5602,
        "src": "105:999:59",
        "usedErrors": []
      }
    ],
    "src": "33:1072:59"
  },
  "bytecode": "60c060405234801561001057600080fd5b506040516104d53803806104d583398101604081905261002f9161006e565b6001600160e01b0319821660805280600381111561004f5761004f6100b9565b60a0816003811115610063576100636100b9565b8152505050506100cf565b6000806040838503121561008157600080fd5b82516001600160e01b03198116811461009957600080fd5b6020840151909250600481106100ae57600080fd5b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b60805160a0516103d56101006000396000818160660152818160ec015261012b015260006101b201526103d56000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150b7a0214610030575b600080fd5b61004361003e36600461020b565b610060565b6040516001600160e01b0319909116815260200160405180910390f35b600060017f00000000000000000000000000000000000000000000000000000000000000006003811115610096576100966102e7565b14156100e85760405162461bcd60e51b815260206004820152601d60248201527f45524337323152656365697665724d6f636b3a20726576657274696e67000000604482015260640160405180910390fd5b60027f0000000000000000000000000000000000000000000000000000000000000000600381111561011c5761011c6102e7565b141561012757600080fd5b60037f0000000000000000000000000000000000000000000000000000000000000000600381111561015b5761015b6102e7565b141561017057600061016d81806102fd565b50505b7f28fa6e16458f9c24aa59ddd4085264573006dbe30304837873c7deafc702b038858585855a6040516101a795949392919061031f565b60405180910390a1507f0000000000000000000000000000000000000000000000000000000000000000949350505050565b80356001600160a01b03811681146101f057600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561022157600080fd5b61022a856101d9565b9350610238602086016101d9565b925060408501359150606085013567ffffffffffffffff8082111561025c57600080fd5b818701915087601f83011261027057600080fd5b813581811115610282576102826101f5565b604051601f8201601f19908116603f011681019083821181831017156102aa576102aa6101f5565b816040528281528a60208487010111156102c357600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b634e487b7160e01b600052602160045260246000fd5b60008261031a57634e487b7160e01b600052601260045260246000fd5b500490565b600060018060a01b03808816835260208188168185015286604085015260a06060850152855191508160a085015260005b8281101561036c5786810182015185820160c001528101610350565b8281111561037e57600060c084870101525b5050608083019390935250601f91909101601f19160160c00194935050505056fea2646970667358221220ca9a5d79f09c0b61a9f3cbb9bc6069171929dd300445f544c085322eaccaecf564736f6c634300080c0033",
  "bytecodeSha1": "20b0f2c03680f297ca4c33815b22626a4e38786a",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.12+commit.f00d7308"
  },
  "contractName": "ERC721ReceiverMock",
  "coverageMap": {
    "branches": {
      "130": {},
      "59": {
        "ERC721ReceiverMock.onERC721Received": {
          "4": [
            719,
            752,
            false
          ],
          "5": [
            828,
            864,
            false
          ],
          "6": [
            909,
            930,
            false
          ]
        }
      }
    },
    "statements": {
      "130": {},
      "59": {
        "ERC721ReceiverMock.onERC721Received": {
          "0": [
            768,
            807
          ],
          "1": [
            880,
            888
          ],
          "2": [
            1016,
            1071
          ],
          "3": [
            1081,
            1095
          ]
        }
      }
    }
  },
  "dependencies": [
    "IERC721Receiver"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150b7a0214610030575b600080fd5b61004361003e36600461020b565b610060565b6040516001600160e01b0319909116815260200160405180910390f35b600060017f00000000000000000000000000000000000000000000000000000000000000006003811115610096576100966102e7565b14156100e85760405162461bcd60e51b815260206004820152601d60248201527f45524337323152656365697665724d6f636b3a20726576657274696e67000000604482015260640160405180910390fd5b60027f0000000000000000000000000000000000000000000000000000000000000000600381111561011c5761011c6102e7565b141561012757600080fd5b60037f0000000000000000000000000000000000000000000000000000000000000000600381111561015b5761015b6102e7565b141561017057600061016d81806102fd565b50505b7f28fa6e16458f9c24aa59ddd4085264573006dbe30304837873c7deafc702b038858585855a6040516101a795949392919061031f565b60405180910390a1507f0000000000000000000000000000000000000000000000000000000000000000949350505050565b80356001600160a01b03811681146101f057600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561022157600080fd5b61022a856101d9565b9350610238602086016101d9565b925060408501359150606085013567ffffffffffffffff8082111561025c57600080fd5b818701915087601f83011261027057600080fd5b813581811115610282576102826101f5565b604051601f8201601f19908116603f011681019083821181831017156102aa576102aa6101f5565b816040528281528a60208487010111156102c357600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b634e487b7160e01b600052602160045260246000fd5b60008261031a57634e487b7160e01b600052601260045260246000fd5b500490565b600060018060a01b03808816835260208188168185015286604085015260a06060850152855191508160a085015260005b8281101561036c5786810182015185820160c001528101610350565b8281111561037e57600060c084870101525b5050608083019390935250601f91909101601f19160160c00194935050505056fea2646970667358221220ca9a5d79f09c0b61a9f3cbb9bc6069171929dd300445f544c085322eaccaecf564736f6c634300080c0033",
  "deployedSourceMap": "105:999:59:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;540:562;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;;1629:33:174;;;1611:52;;1599:2;1584:18;540:562:59;;;;;;;;697:6;729:23;719:6;:33;;;;;;;;:::i;:::-;;715:292;;;768:39;;-1:-1:-1;;;768:39:59;;2008:2:174;768:39:59;;;1990:21:174;2047:2;2027:18;;;2020:30;2086:31;2066:18;;;2059:59;2135:18;;768:39:59;;;;;;;715:292;838:26;828:6;:36;;;;;;;;:::i;:::-;;824:183;;;880:8;;;824:183;919:11;909:6;:21;;;;;;;;:::i;:::-;;905:102;;;946:9;958:23;946:9;;958:23;:::i;:::-;-1:-1:-1;;905:102:59;1021:50;1030:8;1040:4;1046:7;1055:4;1061:9;1021:50;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;1088:7:59;540:562;;;;;;:::o;14:173:174:-;82:20;;-1:-1:-1;;;;;131:31:174;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:127::-;253:10;248:3;244:20;241:1;234:31;284:4;281:1;274:15;308:4;305:1;298:15;324:1138;419:6;427;435;443;496:3;484:9;475:7;471:23;467:33;464:53;;;513:1;510;503:12;464:53;536:29;555:9;536:29;:::i;:::-;526:39;;584:38;618:2;607:9;603:18;584:38;:::i;:::-;574:48;;669:2;658:9;654:18;641:32;631:42;;724:2;713:9;709:18;696:32;747:18;788:2;780:6;777:14;774:34;;;804:1;801;794:12;774:34;842:6;831:9;827:22;817:32;;887:7;880:4;876:2;872:13;868:27;858:55;;909:1;906;899:12;858:55;945:2;932:16;967:2;963;960:10;957:36;;;973:18;;:::i;:::-;1048:2;1042:9;1016:2;1102:13;;-1:-1:-1;;1098:22:174;;;1122:2;1094:31;1090:40;1078:53;;;1146:18;;;1166:22;;;1143:46;1140:72;;;1192:18;;:::i;:::-;1232:10;1228:2;1221:22;1267:2;1259:6;1252:18;1307:7;1302:2;1297;1293;1289:11;1285:20;1282:33;1279:53;;;1328:1;1325;1318:12;1279:53;1384:2;1379;1375;1371:11;1366:2;1358:6;1354:15;1341:46;1429:1;1424:2;1419;1411:6;1407:15;1403:24;1396:35;1450:6;1440:16;;;;;;;324:1138;;;;;;;:::o;1674:127::-;1735:10;1730:3;1726:20;1723:1;1716:31;1766:4;1763:1;1756:15;1790:4;1787:1;1780:15;2164:217;2204:1;2230;2220:132;;2274:10;2269:3;2265:20;2262:1;2255:31;2309:4;2306:1;2299:15;2337:4;2334:1;2327:15;2220:132;-1:-1:-1;2366:9:174;;2164:217::o;2386:941::-;2608:4;2654:1;2650;2645:3;2641:11;2637:19;2695:2;2687:6;2683:15;2672:9;2665:34;2718:2;2768;2760:6;2756:15;2751:2;2740:9;2736:18;2729:43;2808:6;2803:2;2792:9;2788:18;2781:34;2851:3;2846:2;2835:9;2831:18;2824:31;2884:6;2878:13;2864:27;;2928:6;2922:3;2911:9;2907:19;2900:35;2953:1;2963:141;2977:6;2974:1;2971:13;2963:141;;;3073:14;;;3069:23;;3063:30;3038:17;;;3057:3;3034:27;3027:67;2992:10;;2963:141;;;3122:6;3119:1;3116:13;3113:92;;;3193:1;3187:3;3178:6;3167:9;3163:22;3159:32;3152:43;3113:92;-1:-1:-1;;3308:3:174;3293:19;;3286:35;;;;-1:-1:-1;3266:2:174;3245:15;;;;-1:-1:-1;;3241:29:174;3226:45;3273:3;3222:55;;2386:941;-1:-1:-1;;;;2386:941:174:o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`."
      }
    },
    "version": 1
  },
  "offset": [
    105,
    1104
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x20B JUMP JUMPDEST PUSH2 0x60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH32 0x0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x96 JUMPI PUSH2 0x96 PUSH2 0x2E7 JUMP JUMPDEST EQ ISZERO PUSH2 0xE8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524337323152656365697665724D6F636B3A20726576657274696E67000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH32 0x0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x11C JUMPI PUSH2 0x11C PUSH2 0x2E7 JUMP JUMPDEST EQ ISZERO PUSH2 0x127 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 PUSH32 0x0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x15B JUMPI PUSH2 0x15B PUSH2 0x2E7 JUMP JUMPDEST EQ ISZERO PUSH2 0x170 JUMPI PUSH1 0x0 PUSH2 0x16D DUP2 DUP1 PUSH2 0x2FD JUMP JUMPDEST POP POP JUMPDEST PUSH32 0x28FA6E16458F9C24AA59DDD4085264573006DBE30304837873C7DEAFC702B038 DUP6 DUP6 DUP6 DUP6 GAS PUSH1 0x40 MLOAD PUSH2 0x1A7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x31F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH32 0x0 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x221 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22A DUP6 PUSH2 0x1D9 JUMP JUMPDEST SWAP4 POP PUSH2 0x238 PUSH1 0x20 DUP7 ADD PUSH2 0x1D9 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x25C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x270 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x282 JUMPI PUSH2 0x282 PUSH2 0x1F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2AA JUMPI PUSH2 0x2AA PUSH2 0x1F5 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x2C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x31A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND DUP4 MSTORE PUSH1 0x20 DUP2 DUP9 AND DUP2 DUP6 ADD MSTORE DUP7 PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP6 ADD MSTORE DUP6 MLOAD SWAP2 POP DUP2 PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x36C JUMPI DUP7 DUP2 ADD DUP3 ADD MLOAD DUP6 DUP3 ADD PUSH1 0xC0 ADD MSTORE DUP2 ADD PUSH2 0x350 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x37E JUMPI PUSH1 0x0 PUSH1 0xC0 DUP5 DUP8 ADD ADD MSTORE JUMPDEST POP POP PUSH1 0x80 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE POP PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD PUSH1 0xC0 ADD SWAP5 SWAP4 POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCA SWAP11 0x5D PUSH26 0xF09C0B61A9F3CBB9BC6069171929DD300445F544C085322EACCA 0xEC CREATE2 PUSH5 0x736F6C6343 STOP ADDMOD 0xC STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        105,
        1104
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "5": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "CALLVALUE",
      "path": "59"
    },
    "6": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "DUP1",
      "path": "59"
    },
    "7": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "ISZERO",
      "path": "59"
    },
    "8": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "12": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "DUP1",
      "path": "59"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "REVERT",
      "path": "59"
    },
    "16": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "17": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "POP",
      "path": "59"
    },
    "18": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "CALLDATASIZE",
      "path": "59"
    },
    "21": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "LT",
      "path": "59"
    },
    "22": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x2B"
    },
    "25": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "26": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "CALLDATALOAD",
      "path": "59"
    },
    "29": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "SHR",
      "path": "59"
    },
    "32": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "DUP1",
      "path": "59"
    },
    "33": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "PUSH4",
      "path": "59",
      "value": "0x150B7A02"
    },
    "38": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "EQ",
      "path": "59"
    },
    "39": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x30"
    },
    "42": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "43": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "44": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x0"
    },
    "46": {
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "DUP1",
      "path": "59"
    },
    "47": {
      "first_revert": true,
      "fn": null,
      "offset": [
        105,
        1104
      ],
      "op": "REVERT",
      "path": "59"
    },
    "48": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "49": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x43"
    },
    "52": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x3E"
    },
    "55": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "CALLDATASIZE",
      "path": "59"
    },
    "56": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x4"
    },
    "58": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x20B"
    },
    "61": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "jump": "i",
      "offset": [
        540,
        1102
      ],
      "op": "JUMP",
      "path": "59"
    },
    "62": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "63": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x60"
    },
    "66": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "jump": "i",
      "offset": [
        540,
        1102
      ],
      "op": "JUMP",
      "path": "59"
    },
    "67": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "68": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x40"
    },
    "70": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "MLOAD",
      "path": "59"
    },
    "71": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "73": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "75": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "77": {
      "op": "SHL"
    },
    "78": {
      "op": "SUB"
    },
    "79": {
      "op": "NOT"
    },
    "80": {
      "op": "SWAP1"
    },
    "81": {
      "op": "SWAP2"
    },
    "82": {
      "op": "AND"
    },
    "83": {
      "op": "DUP2"
    },
    "84": {
      "op": "MSTORE"
    },
    "85": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "87": {
      "op": "ADD"
    },
    "88": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x40"
    },
    "90": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "MLOAD",
      "path": "59"
    },
    "91": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "DUP1",
      "path": "59"
    },
    "92": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "SWAP2",
      "path": "59"
    },
    "93": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "SUB",
      "path": "59"
    },
    "94": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "95": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "RETURN",
      "path": "59"
    },
    "96": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "97": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        697,
        703
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x0"
    },
    "99": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        729,
        752
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x1"
    },
    "101": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        719,
        725
      ],
      "op": "PUSH32",
      "path": "59",
      "value": "0x0"
    },
    "134": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        719,
        752
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x3"
    },
    "136": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        719,
        752
      ],
      "op": "DUP2",
      "path": "59"
    },
    "137": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        719,
        752
      ],
      "op": "GT",
      "path": "59"
    },
    "138": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        719,
        752
      ],
      "op": "ISZERO",
      "path": "59"
    },
    "139": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        719,
        752
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x96"
    },
    "142": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        719,
        752
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "143": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        719,
        752
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x96"
    },
    "146": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        719,
        752
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x2E7"
    },
    "149": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "jump": "i",
      "offset": [
        719,
        752
      ],
      "op": "JUMP",
      "path": "59"
    },
    "150": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        719,
        752
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "151": {
      "branch": 4,
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        719,
        752
      ],
      "op": "EQ",
      "path": "59"
    },
    "152": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        715,
        1007
      ],
      "op": "ISZERO",
      "path": "59"
    },
    "153": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        715,
        1007
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0xE8"
    },
    "156": {
      "branch": 4,
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        715,
        1007
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "157": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        768,
        807
      ],
      "op": "PUSH1",
      "path": "59",
      "statement": 0,
      "value": "0x40"
    },
    "159": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        768,
        807
      ],
      "op": "MLOAD",
      "path": "59"
    },
    "160": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "164": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "166": {
      "op": "SHL"
    },
    "167": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        768,
        807
      ],
      "op": "DUP2",
      "path": "59"
    },
    "168": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        768,
        807
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "169": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "171": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        768,
        807
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x4"
    },
    "173": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        768,
        807
      ],
      "op": "DUP3",
      "path": "59"
    },
    "174": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        768,
        807
      ],
      "op": "ADD",
      "path": "59"
    },
    "175": {
      "op": "MSTORE"
    },
    "176": {
      "op": "PUSH1",
      "value": "0x1D"
    },
    "178": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "180": {
      "op": "DUP3"
    },
    "181": {
      "op": "ADD"
    },
    "182": {
      "op": "MSTORE"
    },
    "183": {
      "op": "PUSH32",
      "value": "0x45524337323152656365697665724D6F636B3A20726576657274696E67000000"
    },
    "216": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "218": {
      "op": "DUP3"
    },
    "219": {
      "op": "ADD"
    },
    "220": {
      "op": "MSTORE"
    },
    "221": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "223": {
      "op": "ADD"
    },
    "224": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        768,
        807
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x40"
    },
    "226": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        768,
        807
      ],
      "op": "MLOAD",
      "path": "59"
    },
    "227": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        768,
        807
      ],
      "op": "DUP1",
      "path": "59"
    },
    "228": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        768,
        807
      ],
      "op": "SWAP2",
      "path": "59"
    },
    "229": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        768,
        807
      ],
      "op": "SUB",
      "path": "59"
    },
    "230": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        768,
        807
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "231": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        768,
        807
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "59"
    },
    "232": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        715,
        1007
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "233": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        838,
        864
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x2"
    },
    "235": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        828,
        834
      ],
      "op": "PUSH32",
      "path": "59",
      "value": "0x0"
    },
    "268": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        828,
        864
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x3"
    },
    "270": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        828,
        864
      ],
      "op": "DUP2",
      "path": "59"
    },
    "271": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        828,
        864
      ],
      "op": "GT",
      "path": "59"
    },
    "272": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        828,
        864
      ],
      "op": "ISZERO",
      "path": "59"
    },
    "273": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        828,
        864
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x11C"
    },
    "276": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        828,
        864
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "277": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        828,
        864
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x11C"
    },
    "280": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        828,
        864
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x2E7"
    },
    "283": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "jump": "i",
      "offset": [
        828,
        864
      ],
      "op": "JUMP",
      "path": "59"
    },
    "284": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        828,
        864
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "285": {
      "branch": 5,
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        828,
        864
      ],
      "op": "EQ",
      "path": "59"
    },
    "286": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        824,
        1007
      ],
      "op": "ISZERO",
      "path": "59"
    },
    "287": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        824,
        1007
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x127"
    },
    "290": {
      "branch": 5,
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        824,
        1007
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "291": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        880,
        888
      ],
      "op": "PUSH1",
      "path": "59",
      "statement": 1,
      "value": "0x0"
    },
    "293": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        880,
        888
      ],
      "op": "DUP1",
      "path": "59"
    },
    "294": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        880,
        888
      ],
      "op": "REVERT",
      "path": "59"
    },
    "295": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        824,
        1007
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "296": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        919,
        930
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x3"
    },
    "298": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        909,
        915
      ],
      "op": "PUSH32",
      "path": "59",
      "value": "0x0"
    },
    "331": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        909,
        930
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x3"
    },
    "333": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        909,
        930
      ],
      "op": "DUP2",
      "path": "59"
    },
    "334": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        909,
        930
      ],
      "op": "GT",
      "path": "59"
    },
    "335": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        909,
        930
      ],
      "op": "ISZERO",
      "path": "59"
    },
    "336": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        909,
        930
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x15B"
    },
    "339": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        909,
        930
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "340": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        909,
        930
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x15B"
    },
    "343": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        909,
        930
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x2E7"
    },
    "346": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "jump": "i",
      "offset": [
        909,
        930
      ],
      "op": "JUMP",
      "path": "59"
    },
    "347": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        909,
        930
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "348": {
      "branch": 6,
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        909,
        930
      ],
      "op": "EQ",
      "path": "59"
    },
    "349": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        905,
        1007
      ],
      "op": "ISZERO",
      "path": "59"
    },
    "350": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        905,
        1007
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x170"
    },
    "353": {
      "branch": 6,
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        905,
        1007
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "354": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        946,
        955
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x0"
    },
    "356": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        958,
        981
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x16D"
    },
    "359": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        946,
        955
      ],
      "op": "DUP2",
      "path": "59"
    },
    "360": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        946,
        955
      ],
      "op": "DUP1",
      "path": "59"
    },
    "361": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        958,
        981
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x2FD"
    },
    "364": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "jump": "i",
      "offset": [
        958,
        981
      ],
      "op": "JUMP",
      "path": "59"
    },
    "365": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        958,
        981
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "366": {
      "op": "POP"
    },
    "367": {
      "op": "POP"
    },
    "368": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        905,
        1007
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "369": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1021,
        1071
      ],
      "op": "PUSH32",
      "path": "59",
      "statement": 2,
      "value": "0x28FA6E16458F9C24AA59DDD4085264573006DBE30304837873C7DEAFC702B038"
    },
    "402": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1030,
        1038
      ],
      "op": "DUP6",
      "path": "59"
    },
    "403": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1040,
        1044
      ],
      "op": "DUP6",
      "path": "59"
    },
    "404": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1046,
        1053
      ],
      "op": "DUP6",
      "path": "59"
    },
    "405": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1055,
        1059
      ],
      "op": "DUP6",
      "path": "59"
    },
    "406": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1061,
        1070
      ],
      "op": "GAS",
      "path": "59"
    },
    "407": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1021,
        1071
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x40"
    },
    "409": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1021,
        1071
      ],
      "op": "MLOAD",
      "path": "59"
    },
    "410": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1021,
        1071
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x1A7"
    },
    "413": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1021,
        1071
      ],
      "op": "SWAP6",
      "path": "59"
    },
    "414": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1021,
        1071
      ],
      "op": "SWAP5",
      "path": "59"
    },
    "415": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1021,
        1071
      ],
      "op": "SWAP4",
      "path": "59"
    },
    "416": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1021,
        1071
      ],
      "op": "SWAP3",
      "path": "59"
    },
    "417": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1021,
        1071
      ],
      "op": "SWAP2",
      "path": "59"
    },
    "418": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1021,
        1071
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "419": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1021,
        1071
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x31F"
    },
    "422": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "jump": "i",
      "offset": [
        1021,
        1071
      ],
      "op": "JUMP",
      "path": "59"
    },
    "423": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1021,
        1071
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "424": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1021,
        1071
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x40"
    },
    "426": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1021,
        1071
      ],
      "op": "MLOAD",
      "path": "59"
    },
    "427": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1021,
        1071
      ],
      "op": "DUP1",
      "path": "59"
    },
    "428": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1021,
        1071
      ],
      "op": "SWAP2",
      "path": "59"
    },
    "429": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1021,
        1071
      ],
      "op": "SUB",
      "path": "59"
    },
    "430": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1021,
        1071
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "431": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1021,
        1071
      ],
      "op": "LOG1",
      "path": "59"
    },
    "432": {
      "op": "POP"
    },
    "433": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        1088,
        1095
      ],
      "op": "PUSH32",
      "path": "59",
      "statement": 3,
      "value": "0x0"
    },
    "466": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "SWAP5",
      "path": "59"
    },
    "467": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "SWAP4",
      "path": "59"
    },
    "468": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "POP",
      "path": "59"
    },
    "469": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "POP",
      "path": "59"
    },
    "470": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "POP",
      "path": "59"
    },
    "471": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "offset": [
        540,
        1102
      ],
      "op": "POP",
      "path": "59"
    },
    "472": {
      "fn": "ERC721ReceiverMock.onERC721Received",
      "jump": "o",
      "offset": [
        540,
        1102
      ],
      "op": "JUMP",
      "path": "59"
    },
    "473": {
      "op": "JUMPDEST"
    },
    "474": {
      "op": "DUP1"
    },
    "475": {
      "op": "CALLDATALOAD"
    },
    "476": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "478": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "480": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "482": {
      "op": "SHL"
    },
    "483": {
      "op": "SUB"
    },
    "484": {
      "op": "DUP2"
    },
    "485": {
      "op": "AND"
    },
    "486": {
      "op": "DUP2"
    },
    "487": {
      "op": "EQ"
    },
    "488": {
      "op": "PUSH2",
      "value": "0x1F0"
    },
    "491": {
      "op": "JUMPI"
    },
    "492": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "494": {
      "op": "DUP1"
    },
    "495": {
      "op": "REVERT"
    },
    "496": {
      "op": "JUMPDEST"
    },
    "497": {
      "op": "SWAP2"
    },
    "498": {
      "op": "SWAP1"
    },
    "499": {
      "op": "POP"
    },
    "500": {
      "jump": "o",
      "op": "JUMP"
    },
    "501": {
      "op": "JUMPDEST"
    },
    "502": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "507": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "509": {
      "op": "SHL"
    },
    "510": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "512": {
      "op": "MSTORE"
    },
    "513": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "515": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "517": {
      "op": "MSTORE"
    },
    "518": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "520": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "522": {
      "op": "REVERT"
    },
    "523": {
      "op": "JUMPDEST"
    },
    "524": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "526": {
      "op": "DUP1"
    },
    "527": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "529": {
      "op": "DUP1"
    },
    "530": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "532": {
      "op": "DUP6"
    },
    "533": {
      "op": "DUP8"
    },
    "534": {
      "op": "SUB"
    },
    "535": {
      "op": "SLT"
    },
    "536": {
      "op": "ISZERO"
    },
    "537": {
      "op": "PUSH2",
      "value": "0x221"
    },
    "540": {
      "op": "JUMPI"
    },
    "541": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "543": {
      "op": "DUP1"
    },
    "544": {
      "op": "REVERT"
    },
    "545": {
      "op": "JUMPDEST"
    },
    "546": {
      "op": "PUSH2",
      "value": "0x22A"
    },
    "549": {
      "op": "DUP6"
    },
    "550": {
      "op": "PUSH2",
      "value": "0x1D9"
    },
    "553": {
      "jump": "i",
      "op": "JUMP"
    },
    "554": {
      "op": "JUMPDEST"
    },
    "555": {
      "op": "SWAP4"
    },
    "556": {
      "op": "POP"
    },
    "557": {
      "op": "PUSH2",
      "value": "0x238"
    },
    "560": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "562": {
      "op": "DUP7"
    },
    "563": {
      "op": "ADD"
    },
    "564": {
      "op": "PUSH2",
      "value": "0x1D9"
    },
    "567": {
      "jump": "i",
      "op": "JUMP"
    },
    "568": {
      "op": "JUMPDEST"
    },
    "569": {
      "op": "SWAP3"
    },
    "570": {
      "op": "POP"
    },
    "571": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "573": {
      "op": "DUP6"
    },
    "574": {
      "op": "ADD"
    },
    "575": {
      "op": "CALLDATALOAD"
    },
    "576": {
      "op": "SWAP2"
    },
    "577": {
      "op": "POP"
    },
    "578": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "580": {
      "op": "DUP6"
    },
    "581": {
      "op": "ADD"
    },
    "582": {
      "op": "CALLDATALOAD"
    },
    "583": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "592": {
      "op": "DUP1"
    },
    "593": {
      "op": "DUP3"
    },
    "594": {
      "op": "GT"
    },
    "595": {
      "op": "ISZERO"
    },
    "596": {
      "op": "PUSH2",
      "value": "0x25C"
    },
    "599": {
      "op": "JUMPI"
    },
    "600": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "602": {
      "op": "DUP1"
    },
    "603": {
      "op": "REVERT"
    },
    "604": {
      "op": "JUMPDEST"
    },
    "605": {
      "op": "DUP2"
    },
    "606": {
      "op": "DUP8"
    },
    "607": {
      "op": "ADD"
    },
    "608": {
      "op": "SWAP2"
    },
    "609": {
      "op": "POP"
    },
    "610": {
      "op": "DUP8"
    },
    "611": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "613": {
      "op": "DUP4"
    },
    "614": {
      "op": "ADD"
    },
    "615": {
      "op": "SLT"
    },
    "616": {
      "op": "PUSH2",
      "value": "0x270"
    },
    "619": {
      "op": "JUMPI"
    },
    "620": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "622": {
      "op": "DUP1"
    },
    "623": {
      "op": "REVERT"
    },
    "624": {
      "op": "JUMPDEST"
    },
    "625": {
      "op": "DUP2"
    },
    "626": {
      "op": "CALLDATALOAD"
    },
    "627": {
      "op": "DUP2"
    },
    "628": {
      "op": "DUP2"
    },
    "629": {
      "op": "GT"
    },
    "630": {
      "op": "ISZERO"
    },
    "631": {
      "op": "PUSH2",
      "value": "0x282"
    },
    "634": {
      "op": "JUMPI"
    },
    "635": {
      "op": "PUSH2",
      "value": "0x282"
    },
    "638": {
      "op": "PUSH2",
      "value": "0x1F5"
    },
    "641": {
      "jump": "i",
      "op": "JUMP"
    },
    "642": {
      "op": "JUMPDEST"
    },
    "643": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "645": {
      "op": "MLOAD"
    },
    "646": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "648": {
      "op": "DUP3"
    },
    "649": {
      "op": "ADD"
    },
    "650": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "652": {
      "op": "NOT"
    },
    "653": {
      "op": "SWAP1"
    },
    "654": {
      "op": "DUP2"
    },
    "655": {
      "op": "AND"
    },
    "656": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "658": {
      "op": "ADD"
    },
    "659": {
      "op": "AND"
    },
    "660": {
      "op": "DUP2"
    },
    "661": {
      "op": "ADD"
    },
    "662": {
      "op": "SWAP1"
    },
    "663": {
      "op": "DUP4"
    },
    "664": {
      "op": "DUP3"
    },
    "665": {
      "op": "GT"
    },
    "666": {
      "op": "DUP2"
    },
    "667": {
      "op": "DUP4"
    },
    "668": {
      "op": "LT"
    },
    "669": {
      "op": "OR"
    },
    "670": {
      "op": "ISZERO"
    },
    "671": {
      "op": "PUSH2",
      "value": "0x2AA"
    },
    "674": {
      "op": "JUMPI"
    },
    "675": {
      "op": "PUSH2",
      "value": "0x2AA"
    },
    "678": {
      "op": "PUSH2",
      "value": "0x1F5"
    },
    "681": {
      "jump": "i",
      "op": "JUMP"
    },
    "682": {
      "op": "JUMPDEST"
    },
    "683": {
      "op": "DUP2"
    },
    "684": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "686": {
      "op": "MSTORE"
    },
    "687": {
      "op": "DUP3"
    },
    "688": {
      "op": "DUP2"
    },
    "689": {
      "op": "MSTORE"
    },
    "690": {
      "op": "DUP11"
    },
    "691": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "693": {
      "op": "DUP5"
    },
    "694": {
      "op": "DUP8"
    },
    "695": {
      "op": "ADD"
    },
    "696": {
      "op": "ADD"
    },
    "697": {
      "op": "GT"
    },
    "698": {
      "op": "ISZERO"
    },
    "699": {
      "op": "PUSH2",
      "value": "0x2C3"
    },
    "702": {
      "op": "JUMPI"
    },
    "703": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "705": {
      "op": "DUP1"
    },
    "706": {
      "op": "REVERT"
    },
    "707": {
      "op": "JUMPDEST"
    },
    "708": {
      "op": "DUP3"
    },
    "709": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "711": {
      "op": "DUP7"
    },
    "712": {
      "op": "ADD"
    },
    "713": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "715": {
      "op": "DUP4"
    },
    "716": {
      "op": "ADD"
    },
    "717": {
      "op": "CALLDATACOPY"
    },
    "718": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "720": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "722": {
      "op": "DUP5"
    },
    "723": {
      "op": "DUP4"
    },
    "724": {
      "op": "ADD"
    },
    "725": {
      "op": "ADD"
    },
    "726": {
      "op": "MSTORE"
    },
    "727": {
      "op": "DUP1"
    },
    "728": {
      "op": "SWAP6"
    },
    "729": {
      "op": "POP"
    },
    "730": {
      "op": "POP"
    },
    "731": {
      "op": "POP"
    },
    "732": {
      "op": "POP"
    },
    "733": {
      "op": "POP"
    },
    "734": {
      "op": "POP"
    },
    "735": {
      "op": "SWAP3"
    },
    "736": {
      "op": "SWAP6"
    },
    "737": {
      "op": "SWAP2"
    },
    "738": {
      "op": "SWAP5"
    },
    "739": {
      "op": "POP"
    },
    "740": {
      "op": "SWAP3"
    },
    "741": {
      "op": "POP"
    },
    "742": {
      "jump": "o",
      "op": "JUMP"
    },
    "743": {
      "op": "JUMPDEST"
    },
    "744": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "749": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "751": {
      "op": "SHL"
    },
    "752": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "754": {
      "op": "MSTORE"
    },
    "755": {
      "op": "PUSH1",
      "value": "0x21"
    },
    "757": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "759": {
      "op": "MSTORE"
    },
    "760": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "762": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "764": {
      "op": "REVERT"
    },
    "765": {
      "op": "JUMPDEST"
    },
    "766": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "768": {
      "op": "DUP3"
    },
    "769": {
      "op": "PUSH2",
      "value": "0x31A"
    },
    "772": {
      "op": "JUMPI"
    },
    "773": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "778": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "780": {
      "op": "SHL"
    },
    "781": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "783": {
      "op": "MSTORE"
    },
    "784": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "786": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "788": {
      "op": "MSTORE"
    },
    "789": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "791": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "793": {
      "op": "REVERT"
    },
    "794": {
      "op": "JUMPDEST"
    },
    "795": {
      "op": "POP"
    },
    "796": {
      "op": "DIV"
    },
    "797": {
      "op": "SWAP1"
    },
    "798": {
      "jump": "o",
      "op": "JUMP"
    },
    "799": {
      "op": "JUMPDEST"
    },
    "800": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "802": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "804": {
      "op": "DUP1"
    },
    "805": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "807": {
      "op": "SHL"
    },
    "808": {
      "op": "SUB"
    },
    "809": {
      "op": "DUP1"
    },
    "810": {
      "op": "DUP9"
    },
    "811": {
      "op": "AND"
    },
    "812": {
      "op": "DUP4"
    },
    "813": {
      "op": "MSTORE"
    },
    "814": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "816": {
      "op": "DUP2"
    },
    "817": {
      "op": "DUP9"
    },
    "818": {
      "op": "AND"
    },
    "819": {
      "op": "DUP2"
    },
    "820": {
      "op": "DUP6"
    },
    "821": {
      "op": "ADD"
    },
    "822": {
      "op": "MSTORE"
    },
    "823": {
      "op": "DUP7"
    },
    "824": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "826": {
      "op": "DUP6"
    },
    "827": {
      "op": "ADD"
    },
    "828": {
      "op": "MSTORE"
    },
    "829": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "831": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "833": {
      "op": "DUP6"
    },
    "834": {
      "op": "ADD"
    },
    "835": {
      "op": "MSTORE"
    },
    "836": {
      "op": "DUP6"
    },
    "837": {
      "op": "MLOAD"
    },
    "838": {
      "op": "SWAP2"
    },
    "839": {
      "op": "POP"
    },
    "840": {
      "op": "DUP2"
    },
    "841": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "843": {
      "op": "DUP6"
    },
    "844": {
      "op": "ADD"
    },
    "845": {
      "op": "MSTORE"
    },
    "846": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "848": {
      "op": "JUMPDEST"
    },
    "849": {
      "op": "DUP3"
    },
    "850": {
      "op": "DUP2"
    },
    "851": {
      "op": "LT"
    },
    "852": {
      "op": "ISZERO"
    },
    "853": {
      "op": "PUSH2",
      "value": "0x36C"
    },
    "856": {
      "op": "JUMPI"
    },
    "857": {
      "op": "DUP7"
    },
    "858": {
      "op": "DUP2"
    },
    "859": {
      "op": "ADD"
    },
    "860": {
      "op": "DUP3"
    },
    "861": {
      "op": "ADD"
    },
    "862": {
      "op": "MLOAD"
    },
    "863": {
      "op": "DUP6"
    },
    "864": {
      "op": "DUP3"
    },
    "865": {
      "op": "ADD"
    },
    "866": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "868": {
      "op": "ADD"
    },
    "869": {
      "op": "MSTORE"
    },
    "870": {
      "op": "DUP2"
    },
    "871": {
      "op": "ADD"
    },
    "872": {
      "op": "PUSH2",
      "value": "0x350"
    },
    "875": {
      "op": "JUMP"
    },
    "876": {
      "op": "JUMPDEST"
    },
    "877": {
      "op": "DUP3"
    },
    "878": {
      "op": "DUP2"
    },
    "879": {
      "op": "GT"
    },
    "880": {
      "op": "ISZERO"
    },
    "881": {
      "op": "PUSH2",
      "value": "0x37E"
    },
    "884": {
      "op": "JUMPI"
    },
    "885": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "887": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "889": {
      "op": "DUP5"
    },
    "890": {
      "op": "DUP8"
    },
    "891": {
      "op": "ADD"
    },
    "892": {
      "op": "ADD"
    },
    "893": {
      "op": "MSTORE"
    },
    "894": {
      "op": "JUMPDEST"
    },
    "895": {
      "op": "POP"
    },
    "896": {
      "op": "POP"
    },
    "897": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "899": {
      "op": "DUP4"
    },
    "900": {
      "op": "ADD"
    },
    "901": {
      "op": "SWAP4"
    },
    "902": {
      "op": "SWAP1"
    },
    "903": {
      "op": "SWAP4"
    },
    "904": {
      "op": "MSTORE"
    },
    "905": {
      "op": "POP"
    },
    "906": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "908": {
      "op": "SWAP2"
    },
    "909": {
      "op": "SWAP1"
    },
    "910": {
      "op": "SWAP2"
    },
    "911": {
      "op": "ADD"
    },
    "912": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "914": {
      "op": "NOT"
    },
    "915": {
      "op": "AND"
    },
    "916": {
      "op": "ADD"
    },
    "917": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "919": {
      "op": "ADD"
    },
    "920": {
      "op": "SWAP5"
    },
    "921": {
      "op": "SWAP4"
    },
    "922": {
      "op": "POP"
    },
    "923": {
      "op": "POP"
    },
    "924": {
      "op": "POP"
    },
    "925": {
      "op": "POP"
    },
    "926": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "eec8e0b3146a827a88891d44c844a72185c8b591",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721Receiver.sol\";\n\ncontract ERC721ReceiverMock is IERC721Receiver {\n    enum Error {\n        None,\n        RevertWithMessage,\n        RevertWithoutMessage,\n        Panic\n    }\n\n    bytes4 private immutable _retval;\n    Error private immutable _error;\n\n    event Received(address operator, address from, uint256 tokenId, bytes data, uint256 gas);\n\n    constructor(bytes4 retval, Error error) {\n        _retval = retval;\n        _error = error;\n    }\n\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes memory data\n    ) public override returns (bytes4) {\n        if (_error == Error.RevertWithMessage) {\n            revert(\"ERC721ReceiverMock: reverting\");\n        } else if (_error == Error.RevertWithoutMessage) {\n            revert();\n        } else if (_error == Error.Panic) {\n            uint256 a = uint256(0) / uint256(0);\n            a;\n        }\n        emit Received(operator, from, tokenId, data, gasleft());\n        return _retval;\n    }\n}\n",
  "sourceMap": "105:999:59:-:0;;;437:97;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;487:16:59;;;;522:5;513:14;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;437:97;;105:999;;14:443:174;102:6;110;163:2;151:9;142:7;138:23;134:32;131:52;;;179:1;176;169:12;131:52;205:16;;-1:-1:-1;;;;;;250:32:174;;240:43;;230:71;;297:1;294;287:12;230:71;370:2;355:18;;349:25;320:5;;-1:-1:-1;405:1:174;393:14;;383:42;;421:1;418;411:12;383:42;444:7;434:17;;;14:443;;;;;:::o;462:127::-;523:10;518:3;514:20;511:1;504:31;554:4;551:1;544:15;578:4;575:1;568:15;462:127;105:999:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/openzeppelin/contracts/mocks/ERC721ReceiverMock.sol",
  "type": "contract"
}